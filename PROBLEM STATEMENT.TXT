README: Database Management System for User Roles and Permissions

 Problem Statement
This database system is designed to manage user roles and permissions in an organization. The system enables efficient management of users, their assigned roles, and the permissions associated with each role. For example, an Admin might have permission to Read, Write, and Execute various tasks, while a User may only have the permission to Read.

The system is built to:
Assign roles to users.
Define various permissions for those roles.
Ensure that users can only perform actions they have been granted permission for.
Entities:
Roles: Represent different levels of access (e.g., Admin, Manager, User).
Permissions: Define what actions a role can perform (e.g., Read, Write, Execute).
UserRoles: Links between users and roles.
RolePermissions: Assigns permissions to specific roles.

QL Commands Executed
The following SQL commands were executed to create the necessary tables, manage data, and perform joins and subqueries.

DDL (Data Definition Language) Operations

Creating Tables;
CREATE TABLE Roles (
    role_id INT PRIMARY KEY,
    role_name VARCHAR(50)
);

CREATE TABLE Permissions (
    permission_id INT PRIMARY KEY,
    permission_name VARCHAR(50)
);

CREATE TABLE UserRoles (
    user_id INT,
    role_id INT,
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (role_id) REFERENCES Roles(role_id)
);

CREATE TABLE RolePermissions (
    role_id INT,
    permission_id INT,
    PRIMARY KEY (role_id, permission_id),
    FOREIGN KEY (role_id) REFERENCES Roles(role_id),
    FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)
);
DML (Data Manipulation Language) Operations
Inserting Data:

INSERT INTO Roles (role_id, role_name) VALUES (1, 'Admin'), (2, 'User'), (3, 'Manager');
INSERT INTO Permissions (permission_id, permission_name) VALUES (1, 'Read'), (2, 'Write'), (3, 'Execute');
INSERT INTO UserRoles (user_id, role_id) VALUES (101, 1), (102, 2), (103, 3);
INSERT INTO RolePermissions (role_id, permission_id) VALUES (1, 1), (1, 2), (2, 1), (3, 3);
Updating Data:

UPDATE Roles SET role_name = 'SuperAdmin' WHERE role_id = 1;
Deleting Data:

DELETE FROM UserRoles WHERE user_id = 103;
Join and Subquery 
Performing a Join to retrieve role names along with their assigned permissions:

SELECT Roles.role_name, Permissions.permission_name
FROM RolePermissions
INNER JOIN Roles ON RolePermissions.role_id = Roles.role_id
INNER JOIN Permissions ON RolePermissions.permission_id = Permissions.permission_id;
Subquery to find roles with 'Read' permission:

SELECT role_name
FROM Roles
WHERE role_id IN (SELECT role_id FROM RolePermissions WHERE permission_id = 
(SELECT permission_id FROM Permissions WHERE permission_name = 'Read'));
DCL (Data Control Language)
Granting Permissions:

GRANT SELECT ON Roles TO public;

TCL (Transaction Control Language)

Transaction Control Example:
BEGIN;

INSERT INTO UserRoles (user_id, role_id) VALUES (104, 2);
COMMIT;


Explanations of Results
Roles and Permissions Query: The join query demonstrated how roles and their respective permissions are associated. 

Subquery: This subquery efficiently finds which roles are allowed to perform the ‘Read’ operation, illustrating how permissions are linked back to roles via subqueries.




